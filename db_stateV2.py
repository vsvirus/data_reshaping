# -*- coding: utf-8 -*-
"""
Created on Thu Apr 30 19:38:20 2020

@author: JesÃºs S. Alegre
"""
import json
import pandas as pd
from random import randint, seed, random
from datetime import datetime
from dateutil.relativedelta import relativedelta




# Function to find min, max, categories, and classify them according to types
def seeker(k,v,choices,route,tipo, variables):
    if tipo == 'tc':
        cat = 'tc_cat'
        bol = 'tc_bool'
        num = 'tc_num'
        
    elif tipo == 'tv':
        cat = 'tv_cat'
        bol = 'tv_bool'
        num = 'tv_num'
    
    if k not in choices and k not in second_level:        
        choices[k] = {'Route':route}
        if type(v)==list: # categories
              choices[k]['type'] = cat
              choices[k]['value'] = v
        
        elif type(v) == str: # categories auch
              choices[k]['type'] = cat
              choices[k]['value'] = [v]
             
        elif type(v) == bool: # booleans
              choices[k]['type'] = bol
              choices[k]['value'] = [True,False]
        
        elif type(v) == int or type(v)==float: # numerics
              choices[k]['type'] = num
              choices[k]['value'] = [v,v]
        else: # to avoid conflict with timestamp
          choices[k]['type'] = 'None'
        
        variables[choices[k]['type']] = variables[choices[k]['type']] + [k]
    
    elif k in choices and k not in second_level:
        if type(v)==list and choices[k]['type'] == cat: # necessary because some categorial variables can be equal to several categories
            for elem in v:
                if elem not in choices[k]['value']:
                      choices[k]['value'] = choices[k]['value'] + [elem]
        
        elif type(v)==str and choices[k]['type'] == cat: # necessary because some categorial variables can be equal to several categories
            if v not in choices[k]['value']:
                     choices[k]['value'].append(v)
        
        elif choices[k]['type'] == num:
            if v > choices[k]['value'][1]:
                choices[k]['value'][1]=v
            elif v < choices[k]['value'][0]:
                choices[k]['value'][0]=v
                
    return choices, variables

# Getting the dummy_data from the file generated by the function "dummy_data"
with open("dummy_data.txt") as json_file: 
    DD = json.load(json_file)    

#DD = dummy_data()
DATA = pd.DataFrame(DD)

# to know the name of the first level variables and which ones have other levels underneath:
first_level = []
second_level = []
for k,v in DD[0].items():
    first_level.append(k)
    if type(v) == list:
        second_level.append(k)
 
    
# Gather all variables, classify by type and get their max and min or categories  
# Gather all types, and classify variables accordingly
####################################################################################
variables = {'tc_bool':[] , 'tc_cat':[], 'tc_num':[], 'tv_bool':[], 'tv_cat':[], 'tv_num':[], 'events':[], 'None':[]}      
choices = dict()
for index, patient in DATA.iterrows():
    # To get all the basic info but not the variables with objects inside
    for (k,v) in patient.items():
        route = 'Basic'
        choices, variables = seeker(k,v,choices,route,'tc',variables)
        
    # To get all different the parameters of the blood tests and their max and min within the DB
    lab_tests = patient['lab_tests']
    for test in lab_tests:
        for (item, val) in test.items():
            if item == 'items':
                for param in val:
                    k = param['parameter_key']
                    v = param['value']
                    route = 'Analitica'
                    choices, variables = seeker(k,v,choices,route,'tv', variables)           
        
    #To get all fields from clinical updates and their max and mins
    clinical_update = patient['clinical_updates']
    for update in clinical_update:
        for (k,v) in update.items():
            route = 'Clinico'
            choices, variables = seeker(k,v,choices,route,'tv', variables)
                          
    #To get all the differnt drugs (categories) and their max and min dose
    drug = patient['prescriptions']
    for update in drug: 
        k = update['name']
        v = update['dose']
        route = 'Tratamiento'
        choices, variables = seeker(k,v,choices,route,'tv', variables)
                                             
    # To get all the tests of covid and their possible results (categories)
    sars_cov2_test = patient['coronavirus_tests']
    for update in sars_cov2_test:
        k = update['test_type']
        v = update['result']
        route = 'TestCovid'
        choices, variables = seeker(k,v,choices,route,'tv', variables)
                            
    # To get all the previous conditions names (categories)
    previous_conditions = patient['previous_conditions']
    k = 'Condiciones_Previas' #if I put 'previous_conditions', as it is in 'second_level', it wont take it
    for update in previous_conditions:
         v = update['name']
         route = 'Condiciones_Previas'
         choices, variables = seeker(k,v,choices,route,'tv', variables)     
                    
    # To get all radiological tests variables
    rx = patient['radiological_tests']
    for update in rx:
        for (k,v) in update.items():
            route = 'Radiologia'
            choices, variables = seeker(k,v,choices,route,'tv', variables)
            


# Saving choices and variables as JSON in a txt file
with open('choices.txt', 'w') as outfile:
    json.dump(choices, outfile)
    
with open('variables.txt', 'w') as outfile:
    json.dump(variables, outfile)




        